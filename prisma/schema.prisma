// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//? Comando para executar a migration: 
//? npx prisma migrate dev --name initial

model Usuario {
  id         Int       @id @default(autoincrement())
  nome       String    @db.VarChar(80)
  usuario    String    @unique @db.VarChar(40)
  senha      String    @db.VarChar(256)
  email      String    @unique @db.VarChar(80)
  cpf        String    @db.VarChar(11)
  perfil_id  Int
  empresa_id Int
  createdAt  DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  createdBy  DateTime? @map("created_by") @db.Timestamp(6)
  updatedAt  DateTime? @default(now()) @map("updated_at") @db.Timestamp(6)
  updatedBy  DateTime? @map("updated_by") @db.Timestamp(6)

  // Define os relacionamentos
  perfilFk  Perfil?  @relation("UsuarioPerfil", fields: [perfil_id], references: [id])
  empresaFk Empresa? @relation("UsuarioEmpresa", fields: [empresa_id], references: [id])

  @@map("usuario")
}

model Perfil {
  id        Int       @id @default(autoincrement())
  nome      String    @db.VarChar(80)
  acessos   String    @db.VarChar(40)
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime? @default(now()) @map("updated_at") @db.Timestamp(6)

  perfis Usuario[] @relation("UsuarioPerfil")

  @@map("perfil")
}

model Categoria {
  id        Int       @id @default(autoincrement())
  nome      String    @db.VarChar(128)
  descricao String    @db.Text
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime? @default(now()) @map("updated_at") @db.Timestamp(6)

  produtos Produto[] @relation("ProdutoCategoria")

  @@map("categoria")
}

model Produto {
  id                 Int       @id @default(autoincrement())
  nome               String    @db.VarChar(128)
  categoria_id       Int
  descricao          String?   @db.VarChar(256)
  quantidade_produto BigInt    @db.BigInt
  data_validade      DateTime? @db.Timestamp(6)
  createdAt          DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt          DateTime? @default(now()) @map("updated_at") @db.Timestamp(6)

  categoriaFk    Categoria        @relation("ProdutoCategoria", fields: [categoria_id], references: [id])
  EntradaProduto EntradaProduto[]
  SaidaProduto   SaidaProduto[]

  @@map("produto")
}

model EntradaProduto {
  id           Int      @id @default(autoincrement())
  produto_id   Int
  quantidade   BigInt   @db.BigInt
  data_entrada DateTime @db.Timestamp(6)
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime @default(now()) @map("updated_at") @db.Timestamp(6)

  produto Produto @relation(fields: [produto_id], references: [id])

  @@map("entrada_produto")
}

model SaidaProduto {
  id         Int      @id @default(autoincrement())
  produto_id Int
  quantidade BigInt   @db.BigInt
  data_saida DateTime @db.Timestamp(6)
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt  DateTime @default(now()) @map("updated_at") @db.Timestamp(6)

  produto Produto @relation(fields: [produto_id], references: [id])

  @@map("saida_produto")
}

model Empresa {
  id          Int       @id @default(autoincrement())
  tipo        String    @db.VarChar(1)
  cpfCnpj     String    @map("cpf_cnpj") @db.VarChar(14)
  nome        String    @db.VarChar(80)
  telefone    String?   @db.VarChar(20)
  email       String?   @db.VarChar(100)
  endereco    String?   @db.VarChar(255)
  cidade      String?   @db.VarChar(100)
  estado      String?   @db.VarChar(2)
  cep         String?   @db.VarChar(8)
  status      String    @default("ativo") @db.VarChar(20)
  observacoes String?   @db.Text
  createdAt   DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime? @default(now()) @map("updated_at") @db.Timestamp(6)
  empresas    Usuario[] @relation("UsuarioEmpresa")

  @@map("empresa")
}
